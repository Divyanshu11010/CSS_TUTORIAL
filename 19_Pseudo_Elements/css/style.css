@import url("https://fonts.googleapis.com/css2?family=Nunito&display=swap");

/* || RESET */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

img {
  display: block;
  max-width: 100%;
  height: auto;
}

/* || UTILITY CLASSES */
.nowrap {
  white-space: nowrap;
}

/* || GENERAL STYLES */
html {
  scroll-behavior: smooth;
}

body {
  font: 1.5rem "Nunito", sans-serif;
  min-height: 100vh;
  background-color: #475569;
  background-image: radial-gradient(whitesmoke, #475569);
  display: flex;
  flex-direction: column;
}


/*
?	The 'where' pseudo element makes the specificity 000
*/
/*
//  We can change the specificity of the header, footer by using the 'is' element.
//  :is(header, footer, .card) --> specificity is 010
*/
header,
footer {
  position: sticky;
  background-color: #1e293b;
  color: whitesmoke;
  text-align: center;
  z-index: 1;
}

header {
  top: 0;
}

nav {
  background-color: #fff;
  padding: 0.5rem;
  border-bottom: 2px solid #000;
  font-weight: bolder;
  display: flex;
  justify-content: space-evenly;
}


/*
?	If we want to apply css to any type of link we can use any-link.
*/
nav a:any-link {
  color: #000;
}


/*
?	To avoid repetition of elements, we can use pseudo class named 'is'
! Specificity vary according to contents present inside 'is' bracket.
*/
nav :is(a:hover, a:focus) {
  color: hsla(0, 0%, 20%, 0.6);
}

nav a:active {
  color: red;
}

main {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.5rem;
  padding: 1rem;
}

footer {
  bottom: 0;
}

/* || PROFILE CARD */
.card {
  scroll-margin-top: 8rem;
  width: min(100%, 350px);
  background-color: #cbd5e1;
  border: 2px solid #000;
  border-radius: 15px;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  align-items: center;
}

/*
?	The 'target' pseudo element is used to do css on targeted object/element.
? In cards class each card will be target when we view them.
*/
.card:target {
  border: 2px solid rebeccapurple;
}

.card figure {
  display: flex;
  flex-flow: column nowrap;
}

.card img {
  border: 5px double #333;
  border-radius: 50%;
}

/*
?	elementName:[attributeName] selects all 'elementName' elements having 'attributeName' attribute.
todo  It is generally used to know is there any image without alt attribute
*/
.card img:not([alt]) {
  border: 10px solid red;
}

.card:nth-child(even) {
  background-color: papayawhip;
}

.card figcaption {
  font-weight: bolder;
  font-size: 2rem;
  margin: 1rem;
  text-align: center;
}

.card figcaption::after {
  content: 'âœ¨';
  display: block;
}

/*
todo  look here :)
*/
.card figcaption::first-letter {
  font-size: 3rem;
}

.card p {
  position: relative;
}

/*
?	We can add some contents after an element by using pseudo element 'before'.
! The added content will not be an html content, it will be added only 
*/
.card p::before {
  content: open-quote;
  font-size: 3em;
  position: absolute;
  top: -0.25em;
  left: -0.5em;
}

.card p::after {
  content: close-quote;
  font-size: 3em;
  position: absolute;
  top: -0.25em;
  right: -0.5em;
}

/* || SMALL */
@media screen and (min-width: 576px) {
  main {
    justify-content: center;
    flex-flow: row wrap;
    padding: 1rem;
  }

  .card {
    width: min(100%, 400px);
  }

  .card:last-child {
    order: -1;
  }
}

/* || MEDIUM */
@media screen and (min-width: 768px) {
  nav {
    display: none;
  }

  .card {
    width: min(100%, 325px);
  }

  .card figure {
    flex-flow: column-reverse;
  }

  .card p {
    margin-top: 1rem;
  }
}

/* || LARGE */
@media screen and (min-width: 992px) {
  .card {
    width: min(100%, 400px);
  }

  .card:nth-child(2) {
    order: -1;
  }
}

/* || XL  */
@media screen and (min-width: 1200px) {
  .card {
    width: min(calc(33% - 1rem), 500px);
  }
}

/* || MOBILE DEVICE LANDSCAPE  */
@media screen and (max-height: 425px) and (min-aspect-ratio: 7/4) {
  h1 {
    font-size: 1.5rem;
  }

  nav {
    display: none;
  }

  main {
    flex-flow: row nowrap;
    justify-content: space-evenly;
    align-items: stretch;
  }

  .card {
    width: min(calc(33% - 0.25rem), 200px);
  }

  .card :is(figcaption, p) {
    font-size: 1.25rem;
  }
}